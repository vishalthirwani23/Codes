https://leetcode.com/problems/maximum-performance-of-a-team/
Code:

Time Complexity- O(N * logN) | Space Complexity- O(N)
class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<pair<int, int>> v(n);
        long long sum = 0, ans = 0;
        priority_queue<int> pq;
        
        for (int i = 0; i < n; i++) {
            v[i].first = efficiency[i];
            v[i].second = speed[i];
        }
        sort(v.begin(), v.end());
        for (int i = n - 1; i >= 0; i--) {
            if (pq.size() == k) {
                sum += pq.top();
                pq.pop();
            }
            sum += v[i].second;
            pq.push(-v[i].second);
            ans = max(ans, sum * v[i].first);
        }
        
        return ans % (int)(1e9 + 7);
    }
};
