https://leetcode.com/problems/swim-in-rising-water/
Code:

Time Complexity- O(N * N * logN) | Space Complexity- O(N * N)
class Solution { 
public:
    int swimInWater(vector<vector<int>>& A) {
        int n = A.size(), ans = 0, x, y;
        vector<vector<bool>> visited(n, vector<bool> (n, false));
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        vector<int> dir = {1, 0, -1, 0, 1};
        
        pq.push({A[0][0], 0, 0});
        visited[0][0] = true;
        while (!pq.empty()) {
            vector<int> cur = pq.top();
            pq.pop();
            ans = max(ans, cur[0]);
            if (cur[1] == n - 1 && cur[2] == n - 1) {
                return ans;
            }
            for (int i = 0; i < 4; i++) {
                x = cur[1] + dir[i];
                y = cur[2] + dir[i + 1];
                if (x >= 0 && x < n && y >= 0 && y < n && !visited[x][y]) {
                    visited[x][y] = true;
                    pq.push({A[x][y], x, y});
                }
            }
        }
        
        return 0;
    }
};
