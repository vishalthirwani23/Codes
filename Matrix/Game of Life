https://leetcode.com/problems/game-of-life/
Code :

Time Complexity - O(M * N) | Space Complexity - O(1)
class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        int m = board.size(), n = board[0].size();
        pair<int, int> dir[8] = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1,}, {1, 0}, {1, 1}};
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int live = 0;
                for (int k = 0; k < 8; k++) {
                    int x = i + dir[k].first, y = j + dir[k].second;
                    if (x >= 0 && x < m && y >=0 && y < n) {
                       if(board[x][y] == 1 || board[x][y] == -2) live++;
                    }
                }
                if (board[i][j] == 1) {
                    if (live < 2 || live >= 4) board[i][j] = -2;
                }
                else {
                    if (live == 3) board[i][j] = -1;
                }
            }
        }
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == -1)
                    board[i][j] = 1;
                else if (board[i][j] == -2)
                    board[i][j] = 0;
            }
        }
    }
};
