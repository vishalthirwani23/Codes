https://leetcode.com/problems/shortest-palindrome/
Code : 

Time Complexity - O(N) | Space Complexity - O(N)
class Solution {
public:
    string shortestPalindrome(string s) {
        int n = s.length(), toAdd = n - 1, i = 1, len = 0;
        
        if(n == 0) return "";
        string ans = s, t = s;
        reverse(t.begin(), t.end());
        s = s + "#" + t;
        vector<int> lps(2 * n + 1);
        lps[0] = 0;
        
        while (i <= 2*n) {
            if (s[i] == s[len]) {
                len++;
                lps[i] = len;
                if (i > n && lps[i] - 1 >= 2 * n - i - 2) {
                     toAdd = min(toAdd, i - n - lps[i]);
                }
                i++;
            }
            else{
                if(len)
                len = lps[len - 1];
                else{
                    lps[i]=0;
                    i++;
                }
            }
        }
        
        if (toAdd != 0) {
            string x = ans.substr(n - toAdd);
            reverse(x.begin(), x.end());
            ans = x + ans;  
        }
        
        return ans;
    }
};
