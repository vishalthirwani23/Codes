https://leetcode.com/problems/palindrome-partitioning/
Code:

Time Complexity - O(N*(2^N)) | Space Complexity - O(N)
class Solution {
public:
    bool isPalindrome(string s) {
        int n = s.length(), start = 0, end = n - 1;
        while(start < end){
           if(s[start] != s[end])
            return false;
           start++;
           end--;
        }
        return true;
    }
    
    void backtrack(vector<vector<string>>& ans, vector<string>& temp, int start, int n, string& s) {
       if (start == n) {
          ans.push_back(temp);
          return ;
       }
        
       for (int i = start; i < n; i++) {
          string str = s.substr(start, i-start+1);
          if (isPalindrome(str)) {
             temp.push_back(str);
             backtrack(ans, temp, i+1, n, s);
             temp.pop_back();
          }
       }
    }
    
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;
        int n = s.length();
        
        backtrack(ans, temp, 0, n, s);
        return ans;
    }
};
