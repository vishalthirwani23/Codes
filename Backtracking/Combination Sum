https://leetcode.com/problems/combination-sum/
Code:

class Solution {
public:
    void backtrack(vector<int>& candidates, vector<vector<int>>& ans, vector<int>& combination, int index, int target, int n) {
        if (target == 0) {
            ans.push_back(combination);
            return;
        }
        if (target < 0 || index == n) {
            return;
        }
        
        combination.push_back(candidates[index]);
        backtrack(candidates, ans, combination, index, target - candidates[index], n);
        combination.pop_back();
        backtrack(candidates, ans, combination, index + 1, target, n);
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        int n = candidates.size();
        vector<vector<int>> ans;
        vector<int> combination;
        
        backtrack(candidates, ans, combination, 0, target, n);
        return ans;
    }
};
