https://leetcode.com/problems/n-queens/
Code:

class Solution {
public:
    bool isSafe(vector<string>& board, int r, int c, int n) {
        for (int i = 0; i < r; i++) {
            if (i - r + c >= 0 && board[i][i - r + c] == 'Q') {
                return false;
            }
        }
        for (int i = 0; i < r; i++) {
            if (i - r - c < n && board[i][-i + r + c] == 'Q') {
                return false;
            }
        }
        
        for (int i = 0; i < r; i++) {
            if (board[i][c] == 'Q') {
                return false;
            }
        }
        return true;
    }
    
    void backtrack(vector<vector<string>>& ans, vector<string>& board, int r, int n) {
        if (r == n) {
            ans.push_back(board);
            return;
        }
        
        for (int i = 0; i < n; i++) {
            if (isSafe(board, r, i, n)) {
                board[r][i] = 'Q';
                backtrack(ans, board, r + 1, n);
                board[r][i] = '.';
            }    
        }
    }
    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n, string(n, '.'));
        backtrack(ans, board, 0, n);
        return ans;
    }
};
