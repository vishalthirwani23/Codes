https://leetcode.com/problems/combination-sum-ii/
Code:

class Solution {
public:
    void backtrack(vector<int>& candidates, vector<vector<int>>& ans, vector<int>& temp, int index, int target, int n){
        if (target == 0) {
            ans.push_back(temp);
            return;        
        }
        if (target < 0 || index == n) {
            return;
        }
        
        for (int i = index; i < n; i++) {
            temp.push_back(candidates[i]);
            backtrack(candidates, ans, temp, i + 1, target - candidates[i], n);
            temp.pop_back();
            while (i + 1 < n && candidates[i] == candidates[i + 1]) {
                i++;
            }
        }
    }
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        int n = candidates.size();
        vector<vector<int> > ans;
        vector<int> temp;
        
        sort(candidates.begin(), candidates.end());
        backtrack(candidates, ans, temp, 0, target, n);
        
        return ans;
    }
};
