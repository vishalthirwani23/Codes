https://leetcode.com/problems/partition-to-k-equal-sum-subsets/
Code:

class Solution {
public:
    
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        if(k == 1) return true;
        int n = nums.size(), sum = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
        }
        if(sum % k != 0 || sum / k < *max_element(nums.begin(), nums.end())) return false;
        vector<int> subsets(k, 0);
        vector<bool> taken(n, false);
        int targetSum = sum / k;
        return helper(nums, subsets, taken, targetSum, 0, n, k, 0);
    }
    
    bool helper(vector<int>& nums, vector<int>& subsets, vector<bool>& taken, int targetSum, int currIndex, int n, int k, int start){
        if(subsets[currIndex] == targetSum){
            if(currIndex == k - 2) return true;
            return helper(nums, subsets, taken, targetSum, currIndex + 1, n, k, 0);
        }
        for(int i = start; i < n; i++){
            if(taken[i] == true) continue;
            if(subsets[currIndex] + nums[i] <= targetSum){
                subsets[currIndex] += nums[i];
                taken[i] = true;
                bool flag = helper(nums, subsets, taken, targetSum, currIndex, n, k, i + 1);
                taken[i] = false;
                subsets[currIndex] -= nums[i];
                if(flag == true) return true;
            }
        }
        return false;
    }
    
};
