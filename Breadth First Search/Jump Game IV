https://leetcode.com/problems/jump-game-iv/
Code:

Time Complexity - O(N) | Space Complexity - O(N)
class Solution {
public:
    int minJumps(vector<int>& arr) {
        int n = arr.size(), steps = 0;
        vector<bool> visited(n, false);
        unordered_map<int, vector<int>> indicesOfValue;
        
        for (int i = 0; i < n; i++) {
            indicesOfValue[arr[i]].push_back(i);
        }
        
        if (n == 1) return 0;
        queue<int> pos;
        pos.push(0);
        visited[0] = true;
        
        while (!pos.empty()) {
            steps++;
            int sz = pos.size();
            for (int i = 1; i <= sz; i++) {
                int position = pos.front(), pos1 = position - 1, pos2 = position + 1;
                pos.pop();
                vector<int>& next = indicesOfValue[arr[position]];
                if (pos1 >= 0 && !visited[pos1]) {
                pos.push(pos1);
                visited[pos1] = true;
                }
                if (pos2 == n - 1) return steps;
                if (pos2 < n && !visited[pos2]) {
                pos.push(pos2);
                visited[pos2] = true;
                }
                for (int index : next) {
                    if (index == n - 1) return steps;
                    if (!visited[index]) {
                    pos.push(index);
                    visited[index] = true;
                    }
                }
                next.clear();    
            }
        }
        
        return 0;
    }
};
