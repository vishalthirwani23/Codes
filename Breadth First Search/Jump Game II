https://leetcode.com/problems/jump-game-ii/
Code:

Time Complexity - O(N) | Space Complexity - O(1) 
//In the question it is given that we can surely reach the end, but if it is not guarenteed then also this code will work and return -1 in case we cannot reach the end by making any number of moves.
class Solution {
public:
    int jump(vector<int>& nums) {
        int n = nums.size(), ans = 0, start = 0, end = 0, max_end = 0;
        
        while (end < n - 1) {
            ans++;
            for (int i = start; i <= end; i++) {
                max_end = max(max_end, i + nums[i]);
            }
            if (end == max_end) {
                return -1;
            }
            start = end + 1;
            end = max_end;
        }
        
        return ans;
    }
};






