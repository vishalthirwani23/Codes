https://leetcode.com/problems/ways-to-split-array-into-three-subarrays/
Code:

Time Complexity - O(NlogN) | Space Complexity - O(N)
#define Mod 1000000007

class Solution {
public:
    int binSearch(int sumLeft, vector<int>& pre, int start, int end, bool flag) {
        int res = -1, sum = pre[end + 1];
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            int sumMid = pre[mid] - sumLeft;
            int sumRight = sum - pre[mid];
            if (sumLeft <= sumMid && sumMid <= sumRight) {
                res = mid;
                if (flag)
                    end = mid - 1;
                else
                    start = mid + 1;
            }
            else if (sumMid < sumLeft){
                start = mid + 1;
            }
            else {
                end = mid - 1;
            }
        }
        
        return res;
    }
    
    int waysToSplit(vector<int>& nums) {
        int n = nums.size(), ans = 0;
        vector<int> pre(n);
        
        pre[0] = nums[0];
        for (int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] + nums[i];
        }
        
        for (int i = 0; i < n; i++) {
            int left = binSearch(pre[i], pre, i + 1, n - 2, true);
            int right = binSearch(pre[i], pre, i + 1, n - 2, false);
            if (left == -1) continue;
            ans += right - left + 1;
            ans %= Mod;
        }
        
        return ans;
    }
};
