https://leetcode.com/problems/search-in-rotated-sorted-array-ii/
Code:

Time Complexity : Average Case - O(logN), Worst Case - O(N) | Space Complexity - O(1) 
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int n = nums.size(), left = 0, right = n - 1, mid;
        while(left <= right){
            mid = left + (right - left) / 2;
            if(nums[mid] == target) return true;
            if(nums[mid] > nums[right]){ 
                if(nums[left] <= target && target < nums[mid]){
                    right = mid - 1;
                }
                else
                    left = mid + 1;
            }
            else if(nums[mid] < nums[right]){
                if(nums[mid] < target && target <= nums[right])
                    left = mid + 1;
                else
                    right = mid - 1;
            }
            else{
                right--;
            }
        }
        return false;
    }
};
