https://leetcode.com/problems/search-in-rotated-sorted-array-ii/
Code:

Time Complexity: Average Case- O(logN), Worst Case- O(N) | Space Complexity- O(1) 
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int n = nums.size(), low = 0, high = n - 1, mid;
        
        while (low <= high) {
            mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                return true;
            }
            
            if (nums[mid] < nums[high]) {
                if (nums[mid] < target && nums[high] >= target) {
                    low = mid + 1;
                }    
                else {
                    high = mid - 1;
                }
            }
            else if (nums[mid] == nums[high]) {
                high--;    
            }
            else {
                if (nums[mid] > target && nums[low] <= target) {
                    high = mid - 1;
                }    
                else {
                    low = mid + 1;
                }
            }
        }
        
        return false;
    }
};
