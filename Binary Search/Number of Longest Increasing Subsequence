https://leetcode.com/problems/number-of-longest-increasing-subsequence/
Code:

Approach 1: Time Complexity O(n*n) | Space Complexity O(n)
class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int n = nums.size(), ans = 0, max_len = 0;
        vector<pair<int, int>> dp(n, {1, 1});
        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                if(nums[j] < nums[i]){
                    if(dp[j].first + 1 == dp[i].first){
                        dp[i].second += dp[j].second;
                    }
                    else if(dp[j].first + 1 > dp[i].first){
                        dp[i].first = dp[j].first + 1;
                        dp[i].second = dp[j].second;
                    }
                }
            }
            if(max_len == dp[i].first) ans += dp[i].second;
            else if(max_len < dp[i].first){
                max_len = dp[i].first;
                ans = dp[i].second;
            }
        }
        return ans;
    }
};

Approach 2: Time Complexity O(nlogn) | Space Complexity O(n)
