https://leetcode.com/problems/longest-increasing-subsequence/
Code:

Time Complexity- O(NlogN) | Space Complexity- O(N)
class Solution {
public:
    int lengthOfLIS(vector<int>& A) {
        int n = A.size(), index;
        vector<int> lis;
        
        for (int i = 0; i < n; i++) {
            index = lower_bound(lis.begin(), lis.end(), A[i]) - lis.begin();
            if (index == lis.size()) {
                lis.push_back(A[i]);
            }
            else {
                lis[index] = A[i]; 
            }
        }
        
        return lis.size();
    }
};
