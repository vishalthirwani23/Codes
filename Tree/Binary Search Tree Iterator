https://leetcode.com/problems/binary-search-tree-iterator/
Code:

Time Complexity - theta(1) | Space Complexity - O(N)
class BSTIterator {
public:
    queue<int> values;
    BSTIterator(TreeNode* root) {
        inorder(root);
    }
    void inorder(TreeNode* root) {
      if(root == NULL) return ;
      inorder(root->left);
      values.push(root->val);
      inorder(root->right);  
    }
    int next() {
        int value = values.front();
        values.pop();
        return value;
    }
    bool hasNext() {
         return values.size() > 0;
    }
};

Time Complexity - theta(1) | Space Complexity - O(H)
class BSTIterator {
public:
    stack<TreeNode*> nodes;
    BSTIterator(TreeNode* root) {
        inorder(root);
    }
    void inorder(TreeNode* root) {
      if(root == NULL) return ;
      nodes.push(root); 
      inorder(root->left);  
    }
    int next() {
        TreeNode* node = nodes.top();
        nodes.pop();
        inorder(node->right);
        return node->val;
    }
    bool hasNext() {
         return nodes.size() > 0;
    }
};
