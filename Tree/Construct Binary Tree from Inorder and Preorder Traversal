https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
Code:

Time Complexity- O(N) | Space Complexity- O(N)
class Solution {
public:
    TreeNode* helper(vector<int>& preorder, vector<int>& inorder, int s, int e, int& preIndex, unordered_map<int, int>& valToIndex) {
        if (s > e) {
            return NULL;
        }
        TreeNode* root = new TreeNode(preorder[preIndex]);
        int index = valToIndex[preorder[preIndex]];
        preIndex++;
        root->left = helper(preorder, inorder, s, index - 1, preIndex, valToIndex);
        root->right = helper(preorder, inorder, index + 1, e, preIndex, valToIndex);
        return root;
    }
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size(), preIndex = 0;
        unordered_map<int, int> valToIndex;
        for (int i = 0; i < n; i++) {
            valToIndex[inorder[i]] = i;
        }
        return helper(preorder, inorder, 0, n - 1, preIndex, valToIndex);    
    }
};

Time Complexity- O(N) | Space Complexity- O(1)
