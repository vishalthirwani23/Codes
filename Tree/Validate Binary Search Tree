https://leetcode.com/problems/validate-binary-search-tree/
Code:

Recurive Approach (when duplicates are not allowed)
class Solution {
public:
    TreeNode *prev = NULL;
    bool helper(TreeNode* root){
        if(root == NULL) return true;
        bool flag = helper(root->left); 
        if(flag == false) return false;
        if(prev != NULL && root->val <= prev->val) return false;
        prev = root;
        return helper(root->right);
    }
    bool isValidBST(TreeNode* root) {
        return helper(root);
    }
};

Iterative Approach (when duplicates are not allowed)
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        if(root == NULL) return true;
        TreeNode *prev = NULL;
        stack<TreeNode*> nodes;
        while(nodes.empty() == false || root != NULL){
            while(root != NULL){
                nodes.push(root);
                root = root->left;
            }
            root = nodes.top();
            nodes.pop();
            if(prev && root->val <= prev->val) return false;
            prev = root;
            root = root->right;
        }
        return true;
    }
};

Iterative Approach (when duplicates are allowed)
class Solution {
public:
    
      bool isValidBST(TreeNode* root) {
         stack<TreeNode*> s;
          bool rightSide = false;
          TreeNode *prev=NULL;
          while(root || !s.empty()){
              while(root){
                  s.push(root);
                  root=root->left;
              }
              root=s.top();
              s.pop();
              if(prev && ((rightSide && root->val<=prev->val)||(!rightSide && root->val<prev->val))) return false;
              prev=root;
              root=root->right;
              rightSide = root?true:false;
          }
          return true;
     }
};














