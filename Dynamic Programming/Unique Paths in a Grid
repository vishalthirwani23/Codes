https://www.interviewbit.com/problems/unique-paths-in-a-grid/
Code:

Method 1: Time Complexity O(n*n) | Space Complexity O(n*n)
int Solution::uniquePathsWithObstacles(vector<vector<int> > &A) {
    if(A[0][0]==1) return 0;
    int m=A.size(),n=A[0].size();
    vector<vector<int>> dp(m,vector<int>(n));
    dp[0][0]=1;
    for(int i=1;i<n;i++)
    dp[0][i]=(A[0][i]==1?0:dp[0][i-1]);
    for(int i=1;i<m;i++)
    dp[i][0]=(A[i][0]==1?0:dp[i-1][0]);
     for(int i=1;i<m;i++){
         for(int j=1;j<n;j++){
             if(A[i][j]==1) dp[i][j]=0;
             else
              dp[i][j]=dp[i][j-1]+dp[i-1][j];
         }
     }
    return dp[m-1][n-1];
}
