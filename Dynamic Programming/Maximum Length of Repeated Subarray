https://leetcode.com/problems/maximum-length-of-repeated-subarray/
Code :

Time Complexity - O(M * N) | Space Complexity - O(M * N)
class Solution {
public:
    int findLength(vector<int>& A, vector<int>& B) {
        int ans = 0, m = A.size(), n = B.size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(i == 0 || j == 0)
                    dp[i][j] = (A[i] == B[j]);
                else if(A[i] == B[j])
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                else
                    dp[i][j] = 0;
                ans = max(ans, dp[i][j]);
            }
        }
        return ans;
    }
};
