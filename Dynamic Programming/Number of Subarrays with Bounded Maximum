https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/
Code:

Time Complexity- O(N) | Space Complexity- O(N)
class Solution {
public:
    int numSubarrayBoundedMax(vector<int>& nums, int left, int right) {
        int n = nums.size(), mx = -1, prev = -1, ans = 0;
        vector<int> dp(n);
        
        dp[0] = nums[0] >= left && nums[0] <= right;
        ans += dp[0];
        if (nums[0] > right) {
            prev = 0;
        }
        
        for (int i = 1; i < n; i++) {
            if (nums[i] < left) {
                dp[i] = dp[i - 1];
            }
            else if (nums[i] > right) {
                dp[i] = 0;
                prev = i;
            }
            else {
                dp[i] = i - prev;
            }
            ans += dp[i];
        }
        
        return ans;
    }
};
