https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/
Code:

Time Complexity- O(N * N) | Space Complexity- O(N * N)
class Solution {
public:
    int dp(string& s, int l, int r, vector<vector<int>>& memo) {
        if (l >= r) {
            return 0;
        }
        if (memo[l][r] != -1) {
            return memo[l][r];
        }
        return memo[l][r] = (s[l] == s[r] ? dp(s, l + 1, r - 1, memo) : 1 + min(dp(s, l + 1, r, memo), dp(s, l, r - 1, memo)));
    }
    int minInsertions(string s) {
        int n = s.size();
        vector<vector<int>> memo(n, vector<int> (n, -1));
        return dp(s, 0, n - 1, memo);
    }
};
