https://leetcode.com/problems/house-robber-ii/
Code:

class Solution {
public:
    
    int helper(vector<int>& nums, int low, int high) {
        int n = high - low +1;
        vector<int> dp(n);
        for(int i = low; i <= high; i++){
            if(i == low)
                dp[i - low] = nums[i];
            else if(i == low + 1)
                dp[i - low] = max(nums[low], nums[low + 1]);
            else{
                dp[i - low] = max(dp[i - low - 1], nums[i] + dp[i - low - 2]);
            }
        }  
        return dp[n-1];
    }
    
    int rob(vector<int>& nums) {
        if(nums.empty()) return 0;
        if(nums.size() == 1) return nums[0];
        return max(helper(nums, 0, nums.size()-2), helper(nums, 1, nums.size()-1));
    }
};
