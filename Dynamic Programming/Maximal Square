https://leetcode.com/problems/maximal-square/
Code:

Time Complexity- O(M * N) | Space Complexity- O(N)
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int ans = 0, m = matrix.size(), n = matrix[0].size(), x, y;
        vector<int> dp(n);
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0 || matrix[i][j] == '0') {
                    dp[j] = matrix[i][j] - '0';    
                }   
                else {
                    x = dp[j - 1];
                    y = dp[j];
                    if (x == y) {
                        dp[j] = x;
                        if (matrix[i - x][j - x] == '1')
                            dp[j]++;
                    }
                    else {
                        dp[j] = min(x, y) + 1;    
                    }
                }
                ans = max(ans, dp[j]);
            }    
        }
        
        return ans * ans;
    }
};
