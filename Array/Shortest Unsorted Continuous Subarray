https://leetcode.com/problems/shortest-unsorted-continuous-subarray/
Code:

Time Complexity- O(N) | Space Complexity: O(1)
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int n = nums.size(), mx = nums[0], mn = nums[n - 1], end = -2, start = -1;
        
        for (int i = 1; i < n; i++) {
            mx = max(mx, nums[i]);
            mn = min(mn, nums[n - 1 - i]);
            if (nums[i] != mx) {
                end = i;
            }
            if (nums[n - 1 - i] != mn) {
                start = n - 1 - i;
            }
        }
        
        return end - start + 1;
    }
};

