https://leetcode.com/problems/reverse-linked-list/
Code:

Iterative Solution:

Time Complexity- O(N) | Space Complexity- O(1)
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode *curr = head, *prev = NULL, *next;
        while (curr != NULL) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
};

Recursive Solution:

Time Complexity- O(N) | Space Complexity- O(N)
class Solution {
public:
    ListNode* helper(ListNode* curr, ListNode* prev) {
        if (curr == NULL) {
            return prev;
        }
        ListNode* next = curr->next;
        curr->next = prev;
        return helper(next, curr);
    }
    
    ListNode* reverseList(ListNode* head) {
        return helper(head, NULL);;
    }
};
