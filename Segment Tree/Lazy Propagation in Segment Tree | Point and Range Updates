void pointUpdate(int ind, int low, int high,int node, int val){
    if(low==high){
        seg[ind]+=val;
    }
    else{
        int mid = low + (high-low)/2;
        if(node>=low && node<=mid) pointUpdate(2*ind+1, low, mid, node, val);
        else pointUpdate(2*ind+2, mid+1, high, node, val);
        seg[ind] = seg[2*ind+1] + seg[2*ind+2];
    }
}

void rangeUpdate(int ind, int low, int high, int l, int r, int val){
    if(lazy[ind]!=0){
        seg[ind]+=(high-low+1)*lazy[ind];
        if(low!=high){
            lazy[2*ind+1] += lazy[ind];
            lazy[2*ind+2] += lazy[ind];
        }
        lazy[ind]=0;
    }
    if(low>r || high<l || l>r || low>high) return ;
    if(l<=low && high<=r){
        seg[ind]+=(high-low+1)*val;
        if(low!=high){
            lazy[2*ind+1] += val;
            lazy[2*ind+2] += val;
        }
        return ;
    }
    int mid = low + (high-low)/2;
    rangeUpdate(2*ind+1, low, mid, l, r, val);
    rangeUpdate(2*ind+2, mid+1, high, l, r, val);
    seg[ind] = seg[2*ind+1] + seg[2*ind+2];
}

int querySumLazy(int ind, int low, int high, int l, int r){
    if(lazy[ind]!=0){
        seg[ind]+=(high-low+1)*lazy[ind];
        if(low!=high){
            lazy[2*ind+1] += lazy[ind];
            lazy[2*ind+2] += lazy[ind];
        }
        lazy[ind]=0;
    }
    if(low>r || high<l || l>r || low>high) return 0;
    if(l<=low && high<=r){
        return seg[ind];
    }
    int mid = low + (high-low)/2;
    return querySumLazy(2*ind+1, low, mid, l, r) +
    querySumLazy(2*ind+2, mid+1, high, l, r);
}

